package book.chapter9;

/*
一元数组提升
一些运算符会对操作数进行一元数字提升，分以下3种情况：
.如果操作数在编译期的类型为Byte、Short、Character或者Integer时，首先拆箱为对应的基本类型，然后通过同一性转换或基本类型宽化转换转换为int类型；
.如果操作数在编译期的类型为Long、Float或者Double时，拆箱为对应的基本类型即可；
.如果操作数在编译期的类型为byte、short或者char，则通过基本类型宽化转换转为int类型。
一元数字提升应用在如下的一些表达式中：
.在创建数组时指定数组大小的表达式，表示式必须为int类型
.数组下标索引表达式
.一元负号运算符“-”的操作数
.一元正号运算符“+”的操作数
.按位求补运算符“~”的操作数
.移位运算符中的每个操作数，其中移位运算符包括右移运算符“>>”、无符号右移运算符“>>>”或者左移运算符“<<”
 */
class Test28 {
    public void test() {
        byte b = 2;
        int a[] = new int[b];// 创建数组时指定数组大小表达式的byte类型提升为int类型
        char c = '\u0001';
        a[c] = 1;       // 数组下标索引表达式的byte类型提升为int类型
        a[0] = -c;       // 一元负号运算符“-”的操作数c的类型char提升为int类型
        b = -1;
        int i = ~b;       // 按位求补运算符“~”的操作数b的类型byte提升为int类型
        i = b << 4L;      // 左移运算符“<<”左侧的操作数b的类型byte提升为int类型
    }
}